#include <iostream>
#include <string>
#include <cmath>
#include <algorithm>

class Figure {
protected:
    std::string color;

public:
    Figure(const std::string& c) {
        color = c;
    }

    std::string getColor() const {
        return color;
    }
};

class Circle : public Figure {
private:
    double radius;

public:
    Circle(const std::string& c, double r) : Figure(c), radius(r) {}

    double getCircumference() const {
        return 2 * M_PI * radius;
    }
};

class Rectangle : public Figure {
private:
    double width;
    double height;

public:
    Rectangle(const std::string& c, double w, double h) : Figure(c), width(w), height(h) {}

    double getPerimeter() const {
        return 2 * (width + height);
    }
};

class Triangle : public Figure {
private:
    double a, b, c;

public:
    Triangle(const std::string& col, double sideA, double sideB, double sideC)
        : Figure(col), a(sideA), b(sideB), c(sideC) {}

    double getArea() const {
        double s = (a + b + c) / 2.0;
        return std::sqrt(s * (s - a) * (s - b) * (s - c));
    }
};

int main() {
    Circle circle("Red", 5.0);
    Rectangle rectangle("Blue", 4.0, 6.0);
    Triangle triangle("Green", 3.0, 4.0, 5.0);

    std::cout << "Circle (" << circle.getColor() << ") Circumference: " << circle.getCircumference() << std::endl;
    std::cout << "Rectangle (" << rectangle.getColor() << ") Perimeter: " << rectangle.getPerimeter() << std::endl;
    std::cout << "Triangle (" << triangle.getColor() << ") Area: " << triangle.getArea() << std::endl;

    return 0;
}
